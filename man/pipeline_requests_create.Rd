% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_requests.R
\name{pipeline_requests_create}
\alias{pipeline_requests_create}
\title{Create a pipeline request}
\usage{
pipeline_requests_create(
  pipeline.name,
  data,
  pipeline.timeout = NULL,
  deployment.timeout = NULL,
  preload_content = TRUE,
  ...
)
}
\arguments{
\item{pipeline.name}{character}

\item{data}{list(key = "value") - Example: list(input_field_1 = "input_value_1", input_field_2 = "input_value_2")}

\item{pipeline.timeout}{(optional) integer}

\item{deployment.timeout}{(optional) integer}

\item{preload_content}{(optional) Whether the API response should be preloaded. When TRUE the JSON response string is parsed to an R object. When FALSE, unprocessed API response object is returned. - Default = TRUE}

\item{...}{UBIOPS_PROJECT (system environment variable) UbiOps project name
UBIOPS_API_TOKEN (system environment variable) Token to connect to UbiOps API
UBIOPS_API_URL (optional - system environment variable) UbiOps API url - Default = "https://api.ubiops.com/v2.1"
UBIOPS_TIMEOUT (optional - system environment variable) Maximum request timeout to connect to UbiOps API - Default = NA
UBIOPS_DEFAULT_HEADERS (optional - system environment variable) Default headers to pass to UbiOps API, formatted like "header1:value1,header2:value2" - Default = ""}
}
\value{
Response from the API
 - `id`: Unique identifier for the pipeline request
  - `pipeline`: Name of the pipeline for which the request is made
  - `version`: Name of the pipeline version for which the request is made
  - `success`: A boolean value that indicates whether the pipeline request was successful
  - `error_message`: An error message explaining why the request has failed. NULL if the request was successful.
  - `deployment_requests`: A list of dictionaries containing the results of the deployment requests made for the version objects in the pipeline. The dictionaries contain the following fields:
      - `id`: Unique identifier for the deployment request
      - `pipeline_object`: Name of the object in the pipeline
      - `deployment`: Name of the deployment the request was made to
      - `version`: Name of the version the request was made to
      - `success`: A boolean value that indicates whether the deployment request was successful
      - `error_message`: An error message explaining why the request has failed. NULL if the request was successful.
  - `operator_requests`: A list of dictionaries containing the results of the operator requests made for the version objects in the pipeline. The dictionaries contain the following fields:
      - `id`: Unique identifier for the operator request
      - `pipeline_object`: Name of the object in the pipeline
      - `operator`: Name of the operator the request was made to
      - `success`: A boolean value that indicates whether the operator request was successful
      - `error_message`: An error message explaining why the request has failed. NULL if the request was successful.
  - `pipeline_requests`: A list of dictionaries containing the results of the sub-pipeline requests made for the version objects in the pipeline. The dictionaries contain the following fields:
      - `id`: Unique identifier for the sub-pipeline request
      - `pipeline_object`: Name of the object in the pipeline
      - `pipeline`: Name of the sub-pipeline the request was made to
      - `version`: Name of the version the request was made to
      - `success`: A boolean value that indicates whether the sub-pipeline request was successful
      - `error_message`: An error message explaining why the request has failed. NULL if the request was successful.
  - `result`: A dictionary (structured output type) or string (plain output type) containing the data connected to the pipeline end
}
\description{
Make a direct request to the default version of a pipeline. This method returns all the results of the deployment/operator/sub-pipeline requests made within the pipeline version.
}
\examples{
\dontrun{
data <- list(input_field_1 = "input_value_1", input_field_2 = "input_value_2")

# Use environment variables
Sys.setenv("UBIOPS_PROJECT" = "YOUR PROJECT NAME")
Sys.setenv("UBIOPS_API_TOKEN" = "YOUR API TOKEN")
result <- ubiops::pipeline_requests_create(
   pipeline.name, data,
   pipeline.timeout = NULL, deployment.timeout = NULL
)

# Or provide directly
result <- ubiops::pipeline_requests_create(
   pipeline.name, data,
   pipeline.timeout = NULL, deployment.timeout = NULL, 
   UBIOPS_PROJECT = "YOUR PROJECT NAME", UBIOPS_API_TOKEN = "YOUR API TOKEN"
)

print(result)

# The default API url is https://api.ubiops.com/v2.1
# Want to use a different API url?
# Provide `UBIOPS_API_URL`, either directly or as environment variable.
}
}
